{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tadija\\\\Documents\\\\GitHub\\\\Progi-Projekt\\\\frontend\\\\src\\\\pages\\\\Contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Contact() {\n  _s();\n  const [buildings, setBuildings] = useState([]);\n\n  // Fetch the building data when the component is mounted\n  useEffect(() => {\n    // Replace this URL with the actual API endpoint\n    fetch('http://localhost:4000/zgrade').then(response => response.json()).then(data => setBuildings(data)).catch(error => console.error('Error fetching buildings:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Buildings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"building-list\",\n      children: buildings.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No buildings available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this) : buildings.map(building => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"building-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: building.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: building.image_url,\n          alt: building.name,\n          width: \"300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this)]\n      }, building.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_s(Contact, \"ibxrPMorhdlcOntg/fA7wa8XwVY=\");\n_c = Contact;\nexport default Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Contact","_s","buildings","setBuildings","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","building","name","src","image_url","alt","width","id","_c","$RefreshReg$"],"sources":["C:/Users/Tadija/Documents/GitHub/Progi-Projekt/frontend/src/pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Contact() {\r\n  const [buildings, setBuildings] = useState([]);\r\n\r\n  // Fetch the building data when the component is mounted\r\n  useEffect(() => {\r\n    // Replace this URL with the actual API endpoint\r\n    fetch('http://localhost:4000/zgrade')\r\n      .then((response) => response.json())\r\n      .then((data) => setBuildings(data))\r\n      .catch((error) => console.error('Error fetching buildings:', error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Buildings</h1>\r\n      <div className=\"building-list\">\r\n        {buildings.length === 0 ? (\r\n          <p>No buildings available</p>\r\n        ) : (\r\n          buildings.map((building) => (\r\n            <div key={building.id} className=\"building-item\">\r\n              <h2>{building.name}</h2>\r\n              <img src={building.image_url} alt={building.name} width=\"300\" />\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,YAAY,CAACK,IAAI,CAAC,CAAC,CAClCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;EACxE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBjB,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAAAL,QAAA,EAC3BV,SAAS,CAACgB,MAAM,KAAK,CAAC,gBACrBnB,OAAA;QAAAa,QAAA,EAAG;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAE7Bd,SAAS,CAACiB,GAAG,CAAEC,QAAQ,iBACrBrB,OAAA;QAAuBkB,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAC9Cb,OAAA;UAAAa,QAAA,EAAKQ,QAAQ,CAACC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBjB,OAAA;UAAKuB,GAAG,EAAEF,QAAQ,CAACG,SAAU;UAACC,GAAG,EAAEJ,QAAQ,CAACC,IAAK;UAACI,KAAK,EAAC;QAAK;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAFxDI,QAAQ,CAACM,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhB,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CA7BQD,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AA+BhB,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}