{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tadija\\\\Documents\\\\GitHub\\\\Progi-Projekt\\\\frontend\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport './Main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [discussions, setDiscussions] = useState([]);\n  const [responses, setResponses] = useState(''); // Initialize as a string\n  const [selectedDiscussionId, setSelectedDiscussionId] = useState(null);\n  const [newResponse, setNewResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n\n  // Fetch search results based on the query string\n  const fetchSearchResults = async query => {\n    try {\n      setLoading(true);\n      setError(null);\n      const url = query ? `http://localhost:4000/fetchDiscusion/search` : `http://localhost:4000/fetchDiscusion/all`;\n      const response = await axios.get(url, {\n        params: query ? {\n          query\n        } : {}\n      });\n      setSearchResults(response.data);\n    } catch (err) {\n      setError(`Fali backend za rezultat; ${query ? `Upit koji je poslan je ovaj: ${query}` : 'Svi rezultati nisu dostupni'}`);\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch discussions with optional filtering based on the search query\n  const fetchDiscussions = async searchQuery => {\n    try {\n      const response = await axios.get('http://localhost:4000/data/allDiscussions');\n      let filteredDiscussions = response.data;\n\n      // If searchQuery exists, filter discussions based on title (naslov)\n      if (searchQuery) {\n        filteredDiscussions = filteredDiscussions.filter(discussion => discussion.naslov.toLowerCase().includes(searchQuery.toLowerCase()));\n      }\n      setDiscussions(filteredDiscussions);\n    } catch (error) {\n      console.error('Error fetching discussions:', error);\n    }\n  };\n\n  // Fetch responses to a selected discussion\n  const fetchResponses = async discussionId => {\n    try {\n      const response = await axios.get('http://localhost:4000/data/discussionResponses', {\n        params: {\n          id_diskusije: discussionId\n        }\n      });\n\n      // spremi sve odgovore u wrapper element 'odgovori' kako bi parseFromString kod radio ispravno\n      const wrappedXmlString = `<odgovori>${response.data}</odgovori>`;\n\n      // parsiranje XMLa u DOM objekt\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(wrappedXmlString, \"text/xml\");\n\n      // izdvajanje odgovora iz DOM objekta\n      const responseElements = xmlDoc.getElementsByTagName(\"odgovor\");\n      const parsedResponses = Array.from(responseElements).map(responseElement => ({\n        korisnik: responseElement.getElementsByTagName(\"korisnik\")[0].textContent,\n        tekst: responseElement.getElementsByTagName(\"tekst\")[0].textContent\n      }));\n      setResponses(parsedResponses);\n      setSelectedDiscussionId(discussionId);\n    } catch (error) {\n      console.error(\"Error fetching responses:\", error);\n      setResponses([]); // Reset responses to empty string on error\n    }\n  };\n\n  // Handle adding a new response\n  const handleAddResponse = async e => {\n    e.preventDefault();\n    if (!selectedDiscussionId) return;\n\n    // ne moze se poslati odgovor ako je polje odgovora prazno \n    if (!newResponse.trim()) {\n      console.log('The textarea is empty. Please enter a response before submitting.');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:4000/data/discussionAddResponse', {\n        id_diskusije: selectedDiscussionId,\n        korisnik: 'User1',\n        // Replace with dynamic user data if needed\n        tekst: newResponse\n      });\n      console.log('Response added:', response.data);\n      setNewResponse(''); // Clear the input\n      fetchResponses(selectedDiscussionId); // Refresh responses\n    } catch (error) {\n      console.error('Error adding response:', error);\n    }\n  };\n\n  // Effect for loading search query or fetching all discussions\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const searchQuery = params.get('search_query');\n    fetchSearchResults(searchQuery);\n    fetchDiscussions(searchQuery); // Pass the searchQuery to filter discussions\n  }, [location.search]);\n  const handleAddDiscussion = async e => {\n    e.preventDefault();\n    const {\n      naslov,\n      opis,\n      kreator\n    } = newDiscussion;\n    if (!naslov.trim() || !opis.trim() || !kreator.trim()) {\n      console.log('All fields are required.');\n      return;\n    }\n    try {\n      await axios.post('http://localhost:4000/data/addDiscussion', {\n        naslov,\n        opis,\n        kreator,\n        datum_stvorenja: new Date().toISOString().split('T')[0],\n        zadnji_pristup: new Date().toISOString().split('T')[0]\n      });\n      setNewDiscussion({\n        naslov: '',\n        opis: '',\n        kreator: ''\n      });\n      setShowAddDiscussion(false);\n      fetchDiscussions();\n    } catch (error) {\n      console.error('Error adding discussion:', error);\n    }\n  };\n  // Toggle responses visibility\n  const toggleResponsesVisibility = discussionId => {\n    if (selectedDiscussionId === discussionId) {\n      setSelectedDiscussionId(null); // Hide responses if the same discussion is clicked again\n      setResponses(''); // Reset the responses if they are hidden\n    } else {\n      fetchResponses(discussionId); // Fetch responses if a different discussion is selected\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"U\\u010Ditavanje podataka...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"U\\u010Ditavanje podataka...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Rezultati pretrage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"discussions-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Diskusije\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAddDiscussion(!showAddDiscussion),\n        children: showAddDiscussion ? 'Zatvori formu' : 'Dodaj novu diskusiju'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), showAddDiscussion && /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"add-discussion-form\",\n        onSubmit: handleAddDiscussion,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Dodaj novu diskusiju\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Naslov:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newDiscussion.naslov,\n            onChange: e => setNewDiscussion({\n              ...newDiscussion,\n              naslov: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Opis:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newDiscussion.opis,\n            onChange: e => setNewDiscussion({\n              ...newDiscussion,\n              opis: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Kreator:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newDiscussion.kreator,\n            onChange: e => setNewDiscussion({\n              ...newDiscussion,\n              kreator: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Dodaj diskusiju\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), discussions.map(discussion => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"discussion-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: discussion.naslov\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Autor:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 28\n          }, this), \" \", discussion.kreator]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Opis:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 28\n          }, this), \" \", discussion.opis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Datum objavljeno:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 28\n          }, this), \" \", new Date(discussion.datum_stvorena).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleResponsesVisibility(discussion.id),\n          children: selectedDiscussionId === discussion.id ? 'Sakrij odgovore' : 'Vidi odgovore'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this), selectedDiscussionId === discussion.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"responses-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Odgovori na diskusiju\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 33\n          }, this), responses.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Korisnik:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 52\n                }, this), \" \", response.korisnik]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Tekst:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 52\n                }, this), \" \", response.tekst]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Jo\\u0161 nema odgovora.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleAddResponse,\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: newResponse,\n              onChange: e => setNewResponse(e.target.value),\n              placeholder: \"Dodaj odgovor...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Po\\u0161aljite odgovor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }, this)]\n      }, discussion.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"1huirqWxNrstxzTNZ9wYjI/S34c=\", false, function () {\n  return [useLocation];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","Home","_s","searchResults","setSearchResults","discussions","setDiscussions","responses","setResponses","selectedDiscussionId","setSelectedDiscussionId","newResponse","setNewResponse","loading","setLoading","error","setError","location","fetchSearchResults","query","url","response","get","params","data","err","console","fetchDiscussions","searchQuery","filteredDiscussions","filter","discussion","naslov","toLowerCase","includes","fetchResponses","discussionId","id_diskusije","wrappedXmlString","parser","DOMParser","xmlDoc","parseFromString","responseElements","getElementsByTagName","parsedResponses","Array","from","map","responseElement","korisnik","textContent","tekst","handleAddResponse","e","preventDefault","trim","log","post","URLSearchParams","search","handleAddDiscussion","opis","kreator","newDiscussion","datum_stvorenja","Date","toISOString","split","zadnji_pristup","setNewDiscussion","setShowAddDiscussion","toggleResponsesVisibility","children","fileName","_jsxFileName","lineNumber","columnNumber","className","result","index","onClick","showAddDiscussion","onSubmit","type","value","onChange","target","datum_stvorena","toLocaleDateString","id","length","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Tadija/Documents/GitHub/Progi-Projekt/frontend/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Main.css';\r\n\r\nexport default function Home() {\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [discussions, setDiscussions] = useState([]);\r\n    const [responses, setResponses] = useState(''); // Initialize as a string\r\n    const [selectedDiscussionId, setSelectedDiscussionId] = useState(null);\r\n    const [newResponse, setNewResponse] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const location = useLocation();\r\n\r\n    // Fetch search results based on the query string\r\n    const fetchSearchResults = async (query) => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n\r\n            const url = query\r\n                ? `http://localhost:4000/fetchDiscusion/search`\r\n                : `http://localhost:4000/fetchDiscusion/all`;\r\n\r\n            const response = await axios.get(url, {\r\n                params: query ? { query } : {},\r\n            });\r\n\r\n            setSearchResults(response.data);\r\n        } catch (err) {\r\n            setError(\r\n                `Fali backend za rezultat; ${\r\n                    query ? `Upit koji je poslan je ovaj: ${query}` : 'Svi rezultati nisu dostupni'\r\n                }`\r\n            );\r\n            console.error(err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch discussions with optional filtering based on the search query\r\n    const fetchDiscussions = async (searchQuery) => {\r\n        try {\r\n            const response = await axios.get('http://localhost:4000/data/allDiscussions');\r\n            let filteredDiscussions = response.data;\r\n\r\n            // If searchQuery exists, filter discussions based on title (naslov)\r\n            if (searchQuery) {\r\n                filteredDiscussions = filteredDiscussions.filter((discussion) =>\r\n                    discussion.naslov.toLowerCase().includes(searchQuery.toLowerCase())\r\n                );\r\n            }\r\n\r\n            setDiscussions(filteredDiscussions);\r\n        } catch (error) {\r\n            console.error('Error fetching discussions:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch responses to a selected discussion\r\n    const fetchResponses = async (discussionId) => {\r\n        try {\r\n            const response = await axios.get('http://localhost:4000/data/discussionResponses', {\r\n                params: { id_diskusije: discussionId },\r\n            });\r\n\r\n            // spremi sve odgovore u wrapper element 'odgovori' kako bi parseFromString kod radio ispravno\r\n            const wrappedXmlString = `<odgovori>${response.data}</odgovori>`;\r\n    \r\n            // parsiranje XMLa u DOM objekt\r\n            const parser = new DOMParser();\r\n            const xmlDoc = parser.parseFromString(wrappedXmlString, \"text/xml\");\r\n    \r\n            // izdvajanje odgovora iz DOM objekta\r\n            const responseElements = xmlDoc.getElementsByTagName(\"odgovor\");\r\n            const parsedResponses = Array.from(responseElements).map((responseElement) => ({\r\n                korisnik: responseElement.getElementsByTagName(\"korisnik\")[0].textContent,\r\n                tekst: responseElement.getElementsByTagName(\"tekst\")[0].textContent,\r\n            }));\r\n    \r\n            setResponses(parsedResponses);\r\n            setSelectedDiscussionId(discussionId);\r\n        } catch (error) {\r\n            console.error(\"Error fetching responses:\", error);\r\n            setResponses([]); // Reset responses to empty string on error\r\n        }\r\n    };\r\n\r\n    // Handle adding a new response\r\n    const handleAddResponse = async (e) => {\r\n        e.preventDefault();\r\n        if (!selectedDiscussionId) return;\r\n\r\n        // ne moze se poslati odgovor ako je polje odgovora prazno \r\n        if (!newResponse.trim()) {\r\n            console.log('The textarea is empty. Please enter a response before submitting.');\r\n            return; \r\n        }\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:4000/data/discussionAddResponse', {\r\n                id_diskusije: selectedDiscussionId,\r\n                korisnik: 'User1', // Replace with dynamic user data if needed\r\n                tekst: newResponse,\r\n            });\r\n            console.log('Response added:', response.data);\r\n            setNewResponse(''); // Clear the input\r\n            fetchResponses(selectedDiscussionId); // Refresh responses\r\n        } catch (error) {\r\n            console.error('Error adding response:', error);\r\n        }\r\n    };\r\n\r\n    // Effect for loading search query or fetching all discussions\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        const searchQuery = params.get('search_query');\r\n\r\n        fetchSearchResults(searchQuery);\r\n        fetchDiscussions(searchQuery); // Pass the searchQuery to filter discussions\r\n    }, [location.search]);\r\n\r\n\r\n    \r\n    const handleAddDiscussion = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const { naslov, opis, kreator } = newDiscussion;\r\n\r\n        if (!naslov.trim() || !opis.trim() || !kreator.trim()) {\r\n            console.log('All fields are required.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await axios.post('http://localhost:4000/data/addDiscussion', {\r\n                naslov,\r\n                opis,\r\n                kreator,\r\n                datum_stvorenja: new Date().toISOString().split('T')[0],\r\n                zadnji_pristup: new Date().toISOString().split('T')[0],\r\n            });\r\n\r\n            setNewDiscussion({ naslov: '', opis: '', kreator: '' });\r\n            setShowAddDiscussion(false);\r\n            fetchDiscussions();\r\n        } catch (error) {\r\n            console.error('Error adding discussion:', error);\r\n        }\r\n    };\r\n    // Toggle responses visibility\r\n    const toggleResponsesVisibility = (discussionId) => {\r\n        if (selectedDiscussionId === discussionId) {\r\n            setSelectedDiscussionId(null); // Hide responses if the same discussion is clicked again\r\n            setResponses(''); // Reset the responses if they are hidden\r\n        } else {\r\n            fetchResponses(discussionId); // Fetch responses if a different discussion is selected\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Učitavanje podataka...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            {/*\r\n            <h1>HOME STRANICA</h1>\r\n            <p>\r\n                Ovdje ce se nalaziti naša početna home stranica. U njoj ce biti diskusije.<br />\r\n                Neki message board i voting sustav\r\n            </p>\r\n            */}\r\n\r\n            {loading ? (\r\n                <p>Učitavanje podataka...</p>\r\n            ) : error ? (\r\n                <p>{error}</p>\r\n            ) : (\r\n                <div className=\"search-results\">\r\n                    <h2>Rezultati pretrage</h2>\r\n                    <ul>\r\n                        {searchResults.map((result, index) => (\r\n                            <li key={index}>{result}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"discussions-wrapper\">\r\n                <h2>Diskusije</h2>\r\n\r\n                <button onClick={() => setShowAddDiscussion(!showAddDiscussion)}>\r\n                    {showAddDiscussion ? 'Zatvori formu' : 'Dodaj novu diskusiju'}\r\n                </button>\r\n\r\n                {showAddDiscussion && (\r\n                    <form className=\"add-discussion-form\" onSubmit={handleAddDiscussion}>\r\n                        <h3>Dodaj novu diskusiju</h3>\r\n                        <label>\r\n                            Naslov:\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newDiscussion.naslov}\r\n                                onChange={(e) =>\r\n                                    setNewDiscussion({ ...newDiscussion, naslov: e.target.value })\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Opis:\r\n                            <textarea\r\n                                value={newDiscussion.opis}\r\n                                onChange={(e) =>\r\n                                    setNewDiscussion({ ...newDiscussion, opis: e.target.value })\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Kreator:\r\n                            <input\r\n                                type=\"text\"\r\n                                value={newDiscussion.kreator}\r\n                                onChange={(e) =>\r\n                                    setNewDiscussion({ ...newDiscussion, kreator: e.target.value })\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <button type=\"submit\">Dodaj diskusiju</button>\r\n                    </form>\r\n                )}\r\n\r\n                {discussions.map((discussion) => (\r\n                    <div key={discussion.id} className=\"discussion-box\">\r\n                        <h3>{discussion.naslov}</h3>\r\n                        <p><strong>Autor:</strong> {discussion.kreator}</p>\r\n                        <p><strong>Opis:</strong> {discussion.opis}</p>\r\n                        <p><strong>Datum objavljeno:</strong> {new Date(discussion.datum_stvorena).toLocaleDateString()}</p>\r\n                        <button onClick={() => toggleResponsesVisibility(discussion.id)}>\r\n                            {selectedDiscussionId === discussion.id ? 'Sakrij odgovore' : 'Vidi odgovore'}\r\n                        </button>\r\n\r\n                        {selectedDiscussionId === discussion.id && (\r\n                            <div className=\"responses-section\">\r\n                                <h3>Odgovori na diskusiju</h3>\r\n                                {responses.length > 0 ? (\r\n                                    <ul>\r\n                                        {responses.map((response, index) => (\r\n                                            <li key={index}>\r\n                                                <p><strong>Korisnik:</strong> {response.korisnik}</p>\r\n                                                <p><strong>Tekst:</strong> {response.tekst}</p>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                ) : (\r\n                                    <p>Još nema odgovora.</p>\r\n                                )}\r\n                                <form onSubmit={handleAddResponse}>\r\n                                    <textarea\r\n                                        value={newResponse}\r\n                                        onChange={(e) => setNewResponse(e.target.value)}\r\n                                        placeholder=\"Dodaj odgovor...\"\r\n                                    />\r\n                                    <button type=\"submit\">Pošaljite odgovor</button>\r\n                                </form>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}