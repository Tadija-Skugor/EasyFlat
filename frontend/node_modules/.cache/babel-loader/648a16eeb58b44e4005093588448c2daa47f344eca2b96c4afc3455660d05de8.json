{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tadija\\\\Documents\\\\GitHub\\\\Progi-Projekt\\\\frontend\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport './Main.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [discussions, setDiscussions] = useState([]);\n  const [responses, setResponses] = useState('');\n  const [selectedDiscussionId, setSelectedDiscussionId] = useState(null);\n  const [newResponse, setNewResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showAddDiscussion, setShowAddDiscussion] = useState(false);\n  const [newDiscussion, setNewDiscussion] = useState({\n    naslov: '',\n    opis: ''\n  });\n  const [user, setUser] = useState({\n    username: '',\n    password: ''\n  }); // To manage login credentials\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Track authentication state\n  const location = useLocation();\n\n  // Fetch discussions with optional filtering based on the search query\n  const fetchDiscussions = async searchQuery => {\n    try {\n      const token = localStorage.getItem('authToken'); // Get token from local storage\n      const response = await axios.get('http://localhost:4000/data/allDiscussions', {\n        headers: {\n          'Authorization': `Bearer ${token}` // Send the token in the Authorization header\n        }\n      });\n      let filteredDiscussions = response.data;\n\n      // If searchQuery exists, filter discussions based on title (naslov)\n      if (searchQuery) {\n        filteredDiscussions = filteredDiscussions.filter(discussion => discussion.naslov.toLowerCase().includes(searchQuery.toLowerCase()));\n      }\n      setDiscussions(filteredDiscussions);\n    } catch (error) {\n      console.error('Error fetching discussions:', error);\n      setError('Failed to fetch discussions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle user login (set token after login)\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post('http://localhost:4000/auth/login', {\n        username: user.username,\n        password: user.password\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('authToken', token); // Store token in local storage\n      setIsAuthenticated(true);\n      setError(null);\n    } catch (error) {\n      setError('Login failed. Please check your credentials.');\n    }\n  };\n\n  // Handle adding a new response\n  const handleAddResponse = async e => {\n    e.preventDefault();\n    if (!selectedDiscussionId) return;\n\n    // Cannot submit empty response\n    if (!newResponse.trim()) {\n      console.log('The textarea is empty. Please enter a response before submitting.');\n      return;\n    }\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await axios.post('http://localhost:4000/data/discussionAddResponse', {\n        id_diskusije: selectedDiscussionId,\n        korisnik: 'User1',\n        // Use dynamic user data if needed\n        tekst: newResponse\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Include the token in the headers\n        }\n      });\n      console.log('Response added:', response.data);\n      setNewResponse('');\n      fetchResponses(selectedDiscussionId);\n    } catch (error) {\n      console.error('Error adding response:', error);\n    }\n  };\n  const fetchResponses = async discussionId => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await axios.get('http://localhost:4000/data/discussionResponses', {\n        params: {\n          id_diskusije: discussionId\n        },\n        headers: {\n          'Authorization': `Bearer ${token}` // Include the token in the headers\n        }\n      });\n\n      // Wrap the XML data to make parsing work correctly\n      const wrappedXmlString = `<odgovori>${response.data}</odgovori>`;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(wrappedXmlString, \"text/xml\");\n\n      // Extract responses from the XML DOM\n      const responseElements = xmlDoc.getElementsByTagName(\"odgovor\");\n      const parsedResponses = Array.from(responseElements).map(responseElement => ({\n        korisnik: responseElement.getElementsByTagName(\"korisnik\")[0].textContent,\n        tekst: responseElement.getElementsByTagName(\"tekst\")[0].textContent\n      }));\n      setResponses(parsedResponses);\n      setSelectedDiscussionId(discussionId);\n    } catch (error) {\n      console.error(\"Error fetching responses:\", error);\n      setResponses([]);\n    }\n  };\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const searchQuery = params.get('search_query');\n    fetchDiscussions(searchQuery); // Fetch discussions with optional search filter\n  }, [location.search]);\n\n  // Handle adding a new discussion\n  const handleAddDiscussion = async e => {\n    e.preventDefault();\n    const {\n      naslov,\n      opis\n    } = newDiscussion;\n    if (!naslov.trim() || !opis.trim()) {\n      console.log('All fields are required.');\n      return;\n    }\n    try {\n      const token = localStorage.getItem('authToken');\n      await axios.post('http://localhost:4000/data/addDiscussion', {\n        naslov,\n        opis\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Include the token in the request headers\n        }\n      });\n      setNewDiscussion({\n        naslov: '',\n        opis: ''\n      });\n      setShowAddDiscussion(false);\n      fetchDiscussions();\n    } catch (error) {\n      console.error('Error adding discussion:', error);\n    }\n  };\n  const toggleResponsesVisibility = discussionId => {\n    if (selectedDiscussionId === discussionId) {\n      setSelectedDiscussionId(null);\n      setResponses('');\n    } else {\n      fetchResponses(discussionId);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"U\\u010Ditavanje podataka...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: user.username,\n        onChange: e => setUser({\n          ...user,\n          username: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: user.password,\n        onChange: e => setUser({\n          ...user,\n          password: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"discussions-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Diskusije\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowAddDiscussion(!showAddDiscussion),\n          children: showAddDiscussion ? 'Zatvori formu' : 'Dodaj novu diskusiju'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this), showAddDiscussion && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"add-discussion-form\",\n          onSubmit: handleAddDiscussion,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Dodaj novu diskusiju\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Naslov:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: newDiscussion.naslov,\n              onChange: e => setNewDiscussion({\n                ...newDiscussion,\n                naslov: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Opis:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: newDiscussion.opis,\n              onChange: e => setNewDiscussion({\n                ...newDiscussion,\n                opis: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Dodaj diskusiju\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"discussions-wrapper\",\n        children: discussions.map(discussion => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"discussion-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: discussion.naslov\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Autor:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 36\n            }, this), \" \", discussion.kreator]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Opis:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 36\n            }, this), \" \", discussion.opis]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Datum objavljeno:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 36\n            }, this), \" \", new Date(discussion.datum_stvorena).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleResponsesVisibility(discussion.id),\n            children: selectedDiscussionId === discussion.id ? 'Sakrij odgovore' : 'Vidi odgovore'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this), selectedDiscussionId === discussion.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"responses-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Odgovori na diskusiju\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 41\n            }, this), responses.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: responses.map((response, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Korisnik:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 60\n                  }, this), \" \", response.korisnik]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Tekst:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 60\n                  }, this), \" \", response.tekst]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 57\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 53\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Jo\\u0161 nema odgovora.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleAddResponse,\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                value: newResponse,\n                onChange: e => setNewResponse(e.target.value),\n                placeholder: \"Dodaj odgovor...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Po\\u0161aljite odgovor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 37\n          }, this)]\n        }, discussion.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"pD+qBMbN1NfRtIjSU8heFQET3vw=\", false, function () {\n  return [useLocation];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","searchResults","setSearchResults","discussions","setDiscussions","responses","setResponses","selectedDiscussionId","setSelectedDiscussionId","newResponse","setNewResponse","loading","setLoading","error","setError","showAddDiscussion","setShowAddDiscussion","newDiscussion","setNewDiscussion","naslov","opis","user","setUser","username","password","isAuthenticated","setIsAuthenticated","location","fetchDiscussions","searchQuery","token","localStorage","getItem","response","get","headers","filteredDiscussions","data","filter","discussion","toLowerCase","includes","console","handleLogin","post","setItem","handleAddResponse","e","preventDefault","trim","log","id_diskusije","korisnik","tekst","fetchResponses","discussionId","params","wrappedXmlString","parser","DOMParser","xmlDoc","parseFromString","responseElements","getElementsByTagName","parsedResponses","Array","from","map","responseElement","textContent","URLSearchParams","search","handleAddDiscussion","toggleResponsesVisibility","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","target","onClick","onSubmit","kreator","Date","datum_stvorena","toLocaleDateString","id","length","index","_c","$RefreshReg$"],"sources":["C:/Users/Tadija/Documents/GitHub/Progi-Projekt/frontend/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Main.css';\r\n\r\nexport default function Home() {\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [discussions, setDiscussions] = useState([]);\r\n    const [responses, setResponses] = useState('');\r\n    const [selectedDiscussionId, setSelectedDiscussionId] = useState(null);\r\n    const [newResponse, setNewResponse] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [showAddDiscussion, setShowAddDiscussion] = useState(false);\r\n    const [newDiscussion, setNewDiscussion] = useState({ naslov: '', opis: '' });\r\n    const [user, setUser] = useState({ username: '', password: '' }); // To manage login credentials\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false); // Track authentication state\r\n    const location = useLocation();\r\n  \r\n    // Fetch discussions with optional filtering based on the search query\r\n    const fetchDiscussions = async (searchQuery) => {\r\n        try {\r\n            const token = localStorage.getItem('authToken'); // Get token from local storage\r\n            const response = await axios.get('http://localhost:4000/data/allDiscussions', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Send the token in the Authorization header\r\n                }\r\n            });\r\n            let filteredDiscussions = response.data;\r\n\r\n            // If searchQuery exists, filter discussions based on title (naslov)\r\n            if (searchQuery) {\r\n                filteredDiscussions = filteredDiscussions.filter((discussion) =>\r\n                    discussion.naslov.toLowerCase().includes(searchQuery.toLowerCase())\r\n                );\r\n            }\r\n\r\n            setDiscussions(filteredDiscussions);\r\n        } catch (error) {\r\n            console.error('Error fetching discussions:', error);\r\n            setError('Failed to fetch discussions');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Handle user login (set token after login)\r\n    const handleLogin = async () => {\r\n        try {\r\n            const response = await axios.post('http://localhost:4000/auth/login', {\r\n                username: user.username,\r\n                password: user.password,\r\n            });\r\n            const { token } = response.data;\r\n            localStorage.setItem('authToken', token); // Store token in local storage\r\n            setIsAuthenticated(true);\r\n            setError(null);\r\n        } catch (error) {\r\n            setError('Login failed. Please check your credentials.');\r\n        }\r\n    };\r\n\r\n    // Handle adding a new response\r\n    const handleAddResponse = async (e) => {\r\n        e.preventDefault();\r\n        if (!selectedDiscussionId) return;\r\n\r\n        // Cannot submit empty response\r\n        if (!newResponse.trim()) {\r\n            console.log('The textarea is empty. Please enter a response before submitting.');\r\n            return; \r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await axios.post('http://localhost:4000/data/discussionAddResponse', {\r\n                id_diskusije: selectedDiscussionId,\r\n                korisnik: 'User1', // Use dynamic user data if needed\r\n                tekst: newResponse,\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Include the token in the headers\r\n                }\r\n            });\r\n            console.log('Response added:', response.data);\r\n            setNewResponse('');\r\n            fetchResponses(selectedDiscussionId);\r\n        } catch (error) {\r\n            console.error('Error adding response:', error);\r\n        }\r\n    };\r\n\r\n    const fetchResponses = async (discussionId) => {\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            const response = await axios.get('http://localhost:4000/data/discussionResponses', {\r\n                params: { id_diskusije: discussionId },\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Include the token in the headers\r\n                }\r\n            });\r\n\r\n            // Wrap the XML data to make parsing work correctly\r\n            const wrappedXmlString = `<odgovori>${response.data}</odgovori>`;\r\n            const parser = new DOMParser();\r\n            const xmlDoc = parser.parseFromString(wrappedXmlString, \"text/xml\");\r\n\r\n            // Extract responses from the XML DOM\r\n            const responseElements = xmlDoc.getElementsByTagName(\"odgovor\");\r\n            const parsedResponses = Array.from(responseElements).map((responseElement) => ({\r\n                korisnik: responseElement.getElementsByTagName(\"korisnik\")[0].textContent,\r\n                tekst: responseElement.getElementsByTagName(\"tekst\")[0].textContent,\r\n            }));\r\n\r\n            setResponses(parsedResponses);\r\n            setSelectedDiscussionId(discussionId);\r\n        } catch (error) {\r\n            console.error(\"Error fetching responses:\", error);\r\n            setResponses([]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(location.search);\r\n        const searchQuery = params.get('search_query');\r\n        fetchDiscussions(searchQuery); // Fetch discussions with optional search filter\r\n    }, [location.search]);\r\n\r\n    // Handle adding a new discussion\r\n    const handleAddDiscussion = async (e) => {\r\n        e.preventDefault();\r\n        const { naslov, opis } = newDiscussion;\r\n\r\n        if (!naslov.trim() || !opis.trim()) {\r\n            console.log('All fields are required.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem('authToken');\r\n            await axios.post('http://localhost:4000/data/addDiscussion', {\r\n                naslov,\r\n                opis\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Include the token in the request headers\r\n                }\r\n            });\r\n\r\n            setNewDiscussion({ naslov: '', opis: '' });\r\n            setShowAddDiscussion(false);\r\n            fetchDiscussions();\r\n        } catch (error) {\r\n            console.error('Error adding discussion:', error);\r\n        }\r\n    };\r\n\r\n    const toggleResponsesVisibility = (discussionId) => {\r\n        if (selectedDiscussionId === discussionId) {\r\n            setSelectedDiscussionId(null);\r\n            setResponses('');\r\n        } else {\r\n            fetchResponses(discussionId);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Učitavanje podataka...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            {!isAuthenticated ? (\r\n                <div className=\"login-form\">\r\n                    <h3>Login</h3>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        value={user.username}\r\n                        onChange={(e) => setUser({ ...user, username: e.target.value })}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={user.password}\r\n                        onChange={(e) => setUser({ ...user, password: e.target.value })}\r\n                    />\r\n                    <button onClick={handleLogin}>Login</button>\r\n                    {error && <p>{error}</p>}\r\n                </div>\r\n            ) : (\r\n                <>\r\n                    <div className=\"discussions-wrapper\">\r\n                        <h2>Diskusije</h2>\r\n                        <button onClick={() => setShowAddDiscussion(!showAddDiscussion)}>\r\n                            {showAddDiscussion ? 'Zatvori formu' : 'Dodaj novu diskusiju'}\r\n                        </button>\r\n                        {showAddDiscussion && (\r\n                            <form className=\"add-discussion-form\" onSubmit={handleAddDiscussion}>\r\n                                <h3>Dodaj novu diskusiju</h3>\r\n                                <label>\r\n                                    Naslov:\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={newDiscussion.naslov}\r\n                                        onChange={(e) =>\r\n                                            setNewDiscussion({ ...newDiscussion, naslov: e.target.value })\r\n                                        }\r\n                                    />\r\n                                </label>\r\n                                <label>\r\n                                    Opis:\r\n                                    <textarea\r\n                                        value={newDiscussion.opis}\r\n                                        onChange={(e) =>\r\n                                            setNewDiscussion({ ...newDiscussion, opis: e.target.value })\r\n                                        }\r\n                                    />\r\n                                </label>\r\n                                <button type=\"submit\">Dodaj diskusiju</button>\r\n                            </form>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"discussions-wrapper\">\r\n                        {discussions.map((discussion) => (\r\n                            <div key={discussion.id} className=\"discussion-box\">\r\n                                <h3>{discussion.naslov}</h3>\r\n                                <p><strong>Autor:</strong> {discussion.kreator}</p>\r\n                                <p><strong>Opis:</strong> {discussion.opis}</p>\r\n                                <p><strong>Datum objavljeno:</strong> {new Date(discussion.datum_stvorena).toLocaleDateString()}</p>\r\n                                <button onClick={() => toggleResponsesVisibility(discussion.id)}>\r\n                                    {selectedDiscussionId === discussion.id ? 'Sakrij odgovore' : 'Vidi odgovore'}\r\n                                </button>\r\n\r\n                                {selectedDiscussionId === discussion.id && (\r\n                                    <div className=\"responses-section\">\r\n                                        <h3>Odgovori na diskusiju</h3>\r\n                                        {responses.length > 0 ? (\r\n                                            <ul>\r\n                                                {responses.map((response, index) => (\r\n                                                    <li key={index}>\r\n                                                        <p><strong>Korisnik:</strong> {response.korisnik}</p>\r\n                                                        <p><strong>Tekst:</strong> {response.tekst}</p>\r\n                                                    </li>\r\n                                                ))}\r\n                                            </ul>\r\n                                        ) : (\r\n                                            <p>Još nema odgovora.</p>\r\n                                        )}\r\n                                        <form onSubmit={handleAddResponse}>\r\n                                            <textarea\r\n                                                value={newResponse}\r\n                                                onChange={(e) => setNewResponse(e.target.value)}\r\n                                                placeholder=\"Dodaj odgovor...\"\r\n                                            />\r\n                                            <button type=\"submit\">Pošaljite odgovor</button>\r\n                                        </form>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}